import unittest
from typing import List, Optional, Deque
from collections import deque


class Solution:
    # # dfs, time: O(m*n*4^(m*n)), space: (m*n)
    # def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
    #     row, col = len(heights), len(heights[0])
    #     directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
    #
    #     res = []
    #     # visited = set()
    #     cache = [[[None, None] for _ in range(col)] for _ in range(row)]
    #
    #     def dfs(r, c, visited, prev) -> bool:
    #         if (
    #             r < 0
    #             or c < 0
    #             or r >= row
    #             or c >= col
    #             or (r, c) in visited
    #             or heights[r][c] > prev
    #         ):
    #             return [False, False]
    #
    #         if cache[r][c] != [None, None]:
    #             return cache[r][c]
    #
    #         visited.add((r, c))
    #         height = heights[r][c]
    #
    #         pac = True if r == 0 or c == 0 else False
    #         atl = True if r == row - 1 or c == col - 1 else False
    #
    #         for dr, dc in directions:
    #             _pac, _atl = dfs(r + dr, c + dc, visited, height)
    #             pac |= _pac
    #             atl |= _atl
    #         visited.remove((r, c))
    #
    #         return [pac, atl]
    #
    #     for r in range(row):
    #         for c in range(col):
    #             canReach = dfs(r, c, set(), float("infinity"))  # O(4^(m*n))
    #             pac, atl = canReach
    #             if pac and atl:
    #                 res.append([r, c])
    #             cache[r][c] = canReach
    #
    #     return res

    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        row, col = len(heights), len(heights[0])
        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]

        def bfs(source, ocean):
            q = deque(source)
            while q:
                curr = q.popleft()
                ocean.add(curr)
                r, c = curr
                height = heights[r][c]

                for dr, dc in directions:
                    _r, _c = r + dr, c + dc

                    if _r < 0 or _c < 0 or _r >= row or _c >= col or (_r, _c) in ocean:
                        continue

                    if heights[_r][_c] < height:
                        continue

                    q.append((_r, _c))

        pac = set()
        pq = []

        for r in range(row):
            pq.append((r, 0))
        for c in range(1, col):
            pq.append((0, c))

        bfs(pq, pac)

        atl = set()
        aq = []

        for r in range(row):
            aq.append((r, col - 1))
        for c in range(col - 1):
            aq.append((row - 1, c))

        bfs(aq, atl)

        res = []
        for p in pac:
            if p in atl:
                res.append([p[0], p[1]])

        return res


class Test(unittest.TestCase):
    def test1(self):
        s = Solution()
        heights = [
            [1, 2, 2, 3, 5],
            [3, 2, 3, 4, 4],
            [2, 4, 5, 3, 1],
            [6, 7, 1, 4, 5],
            [5, 1, 1, 2, 4],
        ]
        expected = [[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]]
        result = s.pacificAtlantic(heights)
        result.sort()
        self.assertListEqual(result, expected)

    def test2(self):
        s = Solution()
        heights = [[1]]
        expected = [[0, 0]]
        result = s.pacificAtlantic(heights)
        result.sort()
        self.assertListEqual(result, expected)

    def test3(self):
        s = Solution()
        heights = [[10, 10, 10], [10, 1, 10], [10, 10, 10]]
        expected = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 2], [2, 0], [2, 1], [2, 2]]
        result = s.pacificAtlantic(heights)
        result.sort()
        self.assertListEqual(result, expected)

    def test4(self):
        s = Solution()
        heights = [
            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 16],
            [55, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 70, 17],
            [54, 103, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 116, 71, 18],
            [53, 102, 143, 176, 177, 178, 179, 180, 181, 182, 183, 154, 117, 72, 19],
            [52, 101, 142, 175, 200, 201, 202, 203, 204, 205, 184, 155, 118, 73, 20],
            [51, 100, 141, 174, 199, 216, 217, 218, 219, 206, 185, 156, 119, 74, 21],
            [50, 99, 140, 173, 198, 215, 224, 225, 220, 207, 186, 157, 120, 75, 22],
            [49, 98, 139, 172, 197, 214, 223, 222, 221, 208, 187, 158, 121, 76, 23],
            [48, 97, 138, 171, 196, 213, 212, 211, 210, 209, 188, 159, 122, 77, 24],
            [47, 96, 137, 170, 195, 194, 193, 192, 191, 190, 189, 160, 123, 78, 25],
            [46, 95, 136, 169, 168, 167, 166, 165, 164, 163, 162, 161, 124, 79, 26],
            [45, 94, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 80, 27],
            [44, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 28],
            [43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29],
        ]
        expected = [
            [0, 14],
            [1, 0],
            [1, 1],
            [1, 2],
            [1, 3],
            [1, 4],
            [1, 5],
            [1, 6],
            [1, 7],
            [1, 8],
            [1, 9],
            [1, 10],
            [1, 11],
            [1, 12],
            [1, 13],
            [1, 14],
            [2, 0],
            [2, 1],
            [2, 2],
            [2, 3],
            [2, 4],
            [2, 5],
            [2, 6],
            [2, 7],
            [2, 8],
            [2, 9],
            [2, 10],
            [2, 11],
            [2, 12],
            [2, 13],
            [2, 14],
            [3, 0],
            [3, 1],
            [3, 2],
            [3, 3],
            [3, 4],
            [3, 5],
            [3, 6],
            [3, 7],
            [3, 8],
            [3, 9],
            [3, 10],
            [3, 11],
            [3, 12],
            [3, 13],
            [3, 14],
            [4, 0],
            [4, 1],
            [4, 2],
            [4, 3],
            [4, 4],
            [4, 5],
            [4, 6],
            [4, 7],
            [4, 8],
            [4, 9],
            [4, 10],
            [4, 11],
            [4, 12],
            [4, 13],
            [4, 14],
            [5, 0],
            [5, 1],
            [5, 2],
            [5, 3],
            [5, 4],
            [5, 5],
            [5, 6],
            [5, 7],
            [5, 8],
            [5, 9],
            [5, 10],
            [5, 11],
            [5, 12],
            [5, 13],
            [5, 14],
            [6, 0],
            [6, 1],
            [6, 2],
            [6, 3],
            [6, 4],
            [6, 5],
            [6, 6],
            [6, 7],
            [6, 8],
            [6, 9],
            [6, 10],
            [6, 11],
            [6, 12],
            [6, 13],
            [6, 14],
            [7, 0],
            [7, 1],
            [7, 2],
            [7, 3],
            [7, 4],
            [7, 5],
            [7, 6],
            [7, 7],
            [7, 8],
            [7, 9],
            [7, 10],
            [7, 11],
            [7, 12],
            [7, 13],
            [7, 14],
            [8, 0],
            [8, 1],
            [8, 2],
            [8, 3],
            [8, 4],
            [8, 5],
            [8, 6],
            [8, 7],
            [8, 8],
            [8, 9],
            [8, 10],
            [8, 11],
            [8, 12],
            [8, 13],
            [8, 14],
            [9, 0],
            [9, 1],
            [9, 2],
            [9, 3],
            [9, 4],
            [9, 5],
            [9, 6],
            [9, 7],
            [9, 8],
            [9, 9],
            [9, 10],
            [9, 11],
            [9, 12],
            [9, 13],
            [9, 14],
            [10, 0],
            [10, 1],
            [10, 2],
            [10, 3],
            [10, 4],
            [10, 5],
            [10, 6],
            [10, 7],
            [10, 8],
            [10, 9],
            [10, 10],
            [10, 11],
            [10, 12],
            [10, 13],
            [10, 14],
            [11, 0],
            [11, 1],
            [11, 2],
            [11, 3],
            [11, 4],
            [11, 5],
            [11, 6],
            [11, 7],
            [11, 8],
            [11, 9],
            [11, 10],
            [11, 11],
            [11, 12],
            [11, 13],
            [11, 14],
            [12, 0],
            [12, 1],
            [12, 2],
            [12, 3],
            [12, 4],
            [12, 5],
            [12, 6],
            [12, 7],
            [12, 8],
            [12, 9],
            [12, 10],
            [12, 11],
            [12, 12],
            [12, 13],
            [12, 14],
            [13, 0],
            [13, 1],
            [13, 2],
            [13, 3],
            [13, 4],
            [13, 5],
            [13, 6],
            [13, 7],
            [13, 8],
            [13, 9],
            [13, 10],
            [13, 11],
            [13, 12],
            [13, 13],
            [13, 14],
            [14, 0],
            [14, 1],
            [14, 2],
            [14, 3],
            [14, 4],
            [14, 5],
            [14, 6],
            [14, 7],
            [14, 8],
            [14, 9],
            [14, 10],
            [14, 11],
            [14, 12],
            [14, 13],
            [14, 14],
        ]
        result = s.pacificAtlantic(heights)
        result.sort()
        self.assertListEqual(result, expected)

    def test5(self):
        s = Solution()
        heights = [
            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],
            [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 18],
            [
                63,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                80,
                19,
            ],
            [
                62,
                119,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                134,
                81,
                20,
            ],
            [
                61,
                118,
                167,
                208,
                209,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                180,
                135,
                82,
                21,
            ],
            [
                60,
                117,
                166,
                207,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                218,
                181,
                136,
                83,
                22,
            ],
            [
                59,
                116,
                165,
                206,
                239,
                264,
                265,
                266,
                267,
                268,
                269,
                248,
                219,
                182,
                137,
                84,
                23,
            ],
            [
                58,
                115,
                164,
                205,
                238,
                263,
                280,
                281,
                282,
                283,
                270,
                249,
                220,
                183,
                138,
                85,
                24,
            ],
            [
                57,
                114,
                163,
                204,
                237,
                262,
                279,
                288,
                289,
                284,
                271,
                250,
                221,
                184,
                139,
                86,
                25,
            ],
            [
                56,
                113,
                162,
                203,
                236,
                261,
                278,
                287,
                286,
                285,
                272,
                251,
                222,
                185,
                140,
                87,
                26,
            ],
            [
                55,
                112,
                161,
                202,
                235,
                260,
                277,
                276,
                275,
                274,
                273,
                252,
                223,
                186,
                141,
                88,
                27,
            ],
            [
                54,
                111,
                160,
                201,
                234,
                259,
                258,
                257,
                256,
                255,
                254,
                253,
                224,
                187,
                142,
                89,
                28,
            ],
            [
                53,
                110,
                159,
                200,
                233,
                232,
                231,
                230,
                229,
                228,
                227,
                226,
                225,
                188,
                143,
                90,
                29,
            ],
            [
                52,
                109,
                158,
                199,
                198,
                197,
                196,
                195,
                194,
                193,
                192,
                191,
                190,
                189,
                144,
                91,
                30,
            ],
            [
                51,
                108,
                157,
                156,
                155,
                154,
                153,
                152,
                151,
                150,
                149,
                148,
                147,
                146,
                145,
                92,
                31,
            ],
            [
                50,
                107,
                106,
                105,
                104,
                103,
                102,
                101,
                100,
                99,
                98,
                97,
                96,
                95,
                94,
                93,
                32,
            ],
            [49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33],
        ]
        expected = [
            [0, 16],
            [1, 0],
            [1, 1],
            [1, 2],
            [1, 3],
            [1, 4],
            [1, 5],
            [1, 6],
            [1, 7],
            [1, 8],
            [1, 9],
            [1, 10],
            [1, 11],
            [1, 12],
            [1, 13],
            [1, 14],
            [1, 15],
            [1, 16],
            [2, 0],
            [2, 1],
            [2, 2],
            [2, 3],
            [2, 4],
            [2, 5],
            [2, 6],
            [2, 7],
            [2, 8],
            [2, 9],
            [2, 10],
            [2, 11],
            [2, 12],
            [2, 13],
            [2, 14],
            [2, 15],
            [2, 16],
            [3, 0],
            [3, 1],
            [3, 2],
            [3, 3],
            [3, 4],
            [3, 5],
            [3, 6],
            [3, 7],
            [3, 8],
            [3, 9],
            [3, 10],
            [3, 11],
            [3, 12],
            [3, 13],
            [3, 14],
            [3, 15],
            [3, 16],
            [4, 0],
            [4, 1],
            [4, 2],
            [4, 3],
            [4, 4],
            [4, 5],
            [4, 6],
            [4, 7],
            [4, 8],
            [4, 9],
            [4, 10],
            [4, 11],
            [4, 12],
            [4, 13],
            [4, 14],
            [4, 15],
            [4, 16],
            [5, 0],
            [5, 1],
            [5, 2],
            [5, 3],
            [5, 4],
            [5, 5],
            [5, 6],
            [5, 7],
            [5, 8],
            [5, 9],
            [5, 10],
            [5, 11],
            [5, 12],
            [5, 13],
            [5, 14],
            [5, 15],
            [5, 16],
            [6, 0],
            [6, 1],
            [6, 2],
            [6, 3],
            [6, 4],
            [6, 5],
            [6, 6],
            [6, 7],
            [6, 8],
            [6, 9],
            [6, 10],
            [6, 11],
            [6, 12],
            [6, 13],
            [6, 14],
            [6, 15],
            [6, 16],
            [7, 0],
            [7, 1],
            [7, 2],
            [7, 3],
            [7, 4],
            [7, 5],
            [7, 6],
            [7, 7],
            [7, 8],
            [7, 9],
            [7, 10],
            [7, 11],
            [7, 12],
            [7, 13],
            [7, 14],
            [7, 15],
            [7, 16],
            [8, 0],
            [8, 1],
            [8, 2],
            [8, 3],
            [8, 4],
            [8, 5],
            [8, 6],
            [8, 7],
            [8, 8],
            [8, 9],
            [8, 10],
            [8, 11],
            [8, 12],
            [8, 13],
            [8, 14],
            [8, 15],
            [8, 16],
            [9, 0],
            [9, 1],
            [9, 2],
            [9, 3],
            [9, 4],
            [9, 5],
            [9, 6],
            [9, 7],
            [9, 8],
            [9, 9],
            [9, 10],
            [9, 11],
            [9, 12],
            [9, 13],
            [9, 14],
            [9, 15],
            [9, 16],
            [10, 0],
            [10, 1],
            [10, 2],
            [10, 3],
            [10, 4],
            [10, 5],
            [10, 6],
            [10, 7],
            [10, 8],
            [10, 9],
            [10, 10],
            [10, 11],
            [10, 12],
            [10, 13],
            [10, 14],
            [10, 15],
            [10, 16],
            [11, 0],
            [11, 1],
            [11, 2],
            [11, 3],
            [11, 4],
            [11, 5],
            [11, 6],
            [11, 7],
            [11, 8],
            [11, 9],
            [11, 10],
            [11, 11],
            [11, 12],
            [11, 13],
            [11, 14],
            [11, 15],
            [11, 16],
            [12, 0],
            [12, 1],
            [12, 2],
            [12, 3],
            [12, 4],
            [12, 5],
            [12, 6],
            [12, 7],
            [12, 8],
            [12, 9],
            [12, 10],
            [12, 11],
            [12, 12],
            [12, 13],
            [12, 14],
            [12, 15],
            [12, 16],
            [13, 0],
            [13, 1],
            [13, 2],
            [13, 3],
            [13, 4],
            [13, 5],
            [13, 6],
            [13, 7],
            [13, 8],
            [13, 9],
            [13, 10],
            [13, 11],
            [13, 12],
            [13, 13],
            [13, 14],
            [13, 15],
            [13, 16],
            [14, 0],
            [14, 1],
            [14, 2],
            [14, 3],
            [14, 4],
            [14, 5],
            [14, 6],
            [14, 7],
            [14, 8],
            [14, 9],
            [14, 10],
            [14, 11],
            [14, 12],
            [14, 13],
            [14, 14],
            [14, 15],
            [14, 16],
            [15, 0],
            [15, 1],
            [15, 2],
            [15, 3],
            [15, 4],
            [15, 5],
            [15, 6],
            [15, 7],
            [15, 8],
            [15, 9],
            [15, 10],
            [15, 11],
            [15, 12],
            [15, 13],
            [15, 14],
            [15, 15],
            [15, 16],
            [16, 0],
            [16, 1],
            [16, 2],
            [16, 3],
            [16, 4],
            [16, 5],
            [16, 6],
            [16, 7],
            [16, 8],
            [16, 9],
            [16, 10],
            [16, 11],
            [16, 12],
            [16, 13],
            [16, 14],
            [16, 15],
            [16, 16],
        ]
        result = s.pacificAtlantic(heights)
        result.sort()
        self.assertListEqual(result, expected)


if __name__ == "__main__":
    unittest.main()
